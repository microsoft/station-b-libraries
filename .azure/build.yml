steps:
  - bash: |
      git config --global auto.crlf false
    displayName: Auto.crlf False

  - checkout: self
    lfs: true

  - bash: |
      # Try to get the master branch too, for comparisons.
      git fetch --force --tags --prune --progress --no-recurse-submodules origin master
      # Submodule steps
      git submodule sync
      git submodule update --init --force --depth=1
    displayName: Submodules

  - bash: |
      if [ $(Agent.OS) = 'Windows_NT' ]
      then subdir=Scripts
      else subdir=bin
      fi
      echo "Adding this directory to PATH: $CONDA/$subdir"
      echo "##vso[task.prependpath]$CONDA/$subdir"
    workingDirectory: ./PyStationB
    displayName: Add conda to PATH
    condition: succeeded()

  - bash: |
      conda install conda=4.8.5 -y
      conda --version
      conda list
    workingDirectory: ./PyStationB
    displayName: Install conda

  - script: echo %NUMBER_OF_PROCESSORS%
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    workingDirectory: ./PyStationB
    displayName: Print processors

  # Linux only; not required in Windows
  - bash: sudo chown -R $USER /usr/share/miniconda
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
    workingDirectory: ./PyStationB
    displayName: Take ownership of conda installation

  - bash: |
      echo Creating conda environment in directory `pwd`
      # This command hangs when run in the build pipeline
      # conda update -n base -c defaults conda
      conda env create --file environment.yml --name PyStationB --quiet 2>&1 | tee tmp.create.txt
      if grep -qwi "error:" tmp.create.txt
      then echo conda environment creation FAILED >&2
           exit 1
      fi
      rm tmp.create.txt
      source activate PyStationB
    condition: succeeded()
    workingDirectory: ./PyStationB
    displayName: Create conda environment

  - bash: |
      source activate PyStationB
      # If we are running slow tests, we want to run tests on all subrepositories of the specified type(s)
      if [ "$(run_slow_tests)" = "false" ]
      then SUBREPOS_TO_CHECK=$(python scripts/subrepositories_changed.py)
      else SUBREPOS_TO_CHECK=""
           for type in $(subrepo_types)
              do
              SUBREPOS_TO_CHECK="$SUBREPOS_TO_CHECK $(ls -d $type/*/tests | xargs -n 1 dirname | xargs -n 1 basename | grep -wv Emukit)"
              done
      fi
      if [ -n "$SUBREPOS_TO_CHECK" ]
      then echo Subrepositories to check: $SUBREPOS_TO_CHECK
      else echo No subrepositories to check
      fi
      echo $SUBREPOS_TO_CHECK > subrepos_to_check.txt
    condition: succeeded()
    workingDirectory: ./PyStationB
    displayName: Find subrepositories to check

  - bash: |
      if [ -s setup.py ]
      then
        source activate PyStationB
        pip3 install -e .
      fi
    env:
      IS_DEV_PACKAGE: True
    failOnStderr: false
    condition: succeeded()
    workingDirectory: ./PyStationB
    displayName: Install PyStationB (Dev) Package

  - bash: |
      source activate PyStationB
      SUBREPOS_TO_CHECK=$(cat subrepos_to_check.txt)
      echo Changed subrepositories: $SUBREPOS_TO_CHECK
      RET=0
      CONFIG=$PWD/pyproject.toml
      for subrepo in $SUBREPOS_TO_CHECK
        do
        echo Running black and flake8 in */$subrepo
        (cd */$subrepo; black --config $CONFIG --check . && flake8)
        RC=$?
        if [ $RET -lt $RC ]
        then RET=$RC
        fi
        done
      exit $RET
    failOnStderr: false
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
    workingDirectory: ./PyStationB
    displayName: black and flake8

  - bash: |
      sudo npm install --global pyright@1.1.148
      echo pyright path: $(which pyright)
      source activate PyStationB
      SUBREPOS_TO_CHECK=$(cat subrepos_to_check.txt)
      echo Subrepositories to check: $SUBREPOS_TO_CHECK
      RET=0
      for subrepo in $SUBREPOS_TO_CHECK
        do
        echo
        source scripts/set_pythonpath.sh $subrepo
        pyright */$subrepo
        RC=$?
        if [ $RET -lt $RC ]
        then RET=$RC
        fi
        done
      # pyright failure should only cause build to fail in the slow build
      if [ $(run_slow_tests) = "false" ]
      then RET=0
      fi
      exit $RET
    failOnStderr: eq( variables['run_slow_tests'], false )
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
    workingDirectory: ./PyStationB
    displayName: pyright

  - bash: |
      source activate PyStationB
      SUBREPOS_TO_CHECK=$(cat subrepos_to_check.txt)
      echo Subrepositories to check: $SUBREPOS_TO_CHECK
      RET=0
      for subrepo in $SUBREPOS_TO_CHECK
        do
        echo
        if [ $subrepo = "PyBCKG" ]
        then echo SKIPPING MYPY for PyBKCG - this should be TEMPORARY
             continue
        fi
        if [ $subrepo = "GlobalPenalisation" ]
        then echo SKIPPING MYPY for GlobalPenalisation - this should be TEMPORARY
             continue
        fi
        source scripts/set_pythonpath.sh $subrepo
        (cd */$subrepo; python ../../scripts/mypy_runner.py --config_file ../../mypy.ini)
        RC=$?
        if [ $RET -lt $RC ]
        then RET=$RC
        fi
        done
      exit $RET
    failOnStderr: true
    condition: eq( variables['Agent.OS'], 'Linux' )
    workingDirectory: ./PyStationB
    displayName: mypy

  - bash: |
      source activate PyStationB
      python scripts/check_copyright_notices.py
    failOnStderr: true
    condition: eq( variables['Agent.OS'], 'Linux' )
    workingDirectory: ./PyStationB
    displayName: Check copyright notices

  - bash: |
      source activate PyStationB
      interrogate -c pyproject.toml
    failOnStderr: true
    condition: eq( variables['Agent.OS'], 'Linux' )
    workingDirectory: ./PyStationB
    displayName: interrogate (docstring coverage)

  - bash: |
      source activate PyStationB
      # BUILD_ARTIFACTSTAGINGDIRECTORY (rather than Build.ArtifactStagingDirectory) is always in Unix form.
      export ADDITIONAL_FIGURE_FILE_DIRECTORY=$BUILD_ARTIFACTSTAGINGDIRECTORY/$(Agent.OS)/figures
      SUBREPOS_TO_CHECK=$(cat subrepos_to_check.txt)
      echo Changed subrepositories: $SUBREPOS_TO_CHECK
      if [ "$(run_slow_tests)" = "true" ]
      then XTRA="-t slow_tests"
      else XTRA=""
      fi
      echo Running: scripts/run_all_tests.sh -f $XTRA . $SUBREPOS_TO_CHECK
      bash scripts/run_all_tests.sh -f $XTRA . $SUBREPOS_TO_CHECK
    failOnStderr: false
    condition: succeededOrFailed()
    workingDirectory: ./PyStationB
    displayName: pytest

  - bash: |
      source activate PyStationB
      source scripts/set_pythonpath.sh
      # We could set this to "tests slow_tests", but that can make us hit the
      # ADO 60 minute limit.
      TDLIST="tests"
      DIRS=""
      for type in $(subrepo_types)
        do
        for d in $type/*
          do
          if [ $(basename $d) != Emukit ] && [ $(basename $d) != GlobalPenalisation ]
          then for td in $TDLIST
                 do
                 DTD=$d/$td
                 if [ -d $DTD ]
                 then DIRS="$DIRS $DTD"
                 fi
                 done
          fi
          done
        done
      echo Running: pytest $DIRS
      pytest $DIRS
    failOnStderr: false
    condition: and(eq( variables['Agent.OS'], 'Linux' ), eq( variables.run_slow_tests, 'true' ))
    workingDirectory: ./PyStationB
    displayName: pytest from top level

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    condition: succeededOrFailed()

