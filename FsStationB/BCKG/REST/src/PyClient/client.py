from .model import *
from .utils import datetime_decoder
from .utils import discriminator_decoder
from dataclasses import dataclass
from dataclasses import field
from datetime import date
from datetime import datetime
from datetime import time
from enum import Enum
from http_server_base.auth import *
from http_server_base.model.filtering_json_encoder import FilteringJsonEncoder
from http_server_base.model.iencoder import IEncoder
from http_server_base.tools.filters import filter_out_smart
from http_server_base.tools.logging import RequestLogger
from http_server_base.tools.subrequest_classes import HttpSubrequest
from tornado.httpclient import HTTPRequest
from typing import *
from urllib.parse import ParseResult
from urllib.parse import urlparse

class BiologicalKnowledgeGraphBckGApiClientServers(Enum):
    """ Enum-container of default servers used for `BiologicalKnowledgeGraphBckGApiClient` """
    BCKG_Server = 'https://api.bckg.example.com'
    
class BiologicalKnowledgeGraphBckGApiClient(AuthorizedClient):
    """ This is the initial implementation of the BCKG API. """
    
    server: Union[BiologicalKnowledgeGraphBckGApiClientServers, str]
    logger_name: str = 'biological-knowledge-graph-bck-g.client'
    model_encoder: Type[IEncoder] = FilteringJsonEncoder
    
    def __init__ \
    (
        self,
        server: Union[BiologicalKnowledgeGraphBckGApiClientServers, str] = BiologicalKnowledgeGraphBckGApiClientServers.Station_B_Development_Server,
    ):
        if (isinstance(server, BiologicalKnowledgeGraphBckGApiClientServers)):
            server = server.value
        
        super().__init__()
        self.server = server
        self.initialize_logger()
        self.logger = RequestLogger(None, self.logger)
        
    
    # region Utility Methods
    async def _fetch__form_request(self, request: Union[str, HTTPRequest, HttpSubrequest], **kwargs) -> HttpSubrequest:
        request = await super()._fetch__form_request(request, **kwargs)
        request = await self._fetch__form_request__add_server(request)
        return request
    
    async def _fetch__form_request__add_server(self, request: HttpSubrequest) -> HttpSubrequest:
        parsed: ParseResult = urlparse(request.url)
        if (not parsed.hostname):
            request.url = self.server + request.url
        
        return request
    
    # endregion
    # region Authorization Methods
    # endregion
    # region Client Methods
    async def get_parts_by_part_id(self, part_id: str) -> Part:
        """
        Arguments:
            part_id: `str`.
                **REQUIRED.** Part GUID
        
        Returns:
            `Part`. OK
            A DNA Part
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model(request=f'/parts/{part_id}', model=Part, expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_parts_by_part_id(self, part_id: str, data: Part):
        """
        Arguments:
            part_id: `str`.
                **REQUIRED.** Part GUID
            
            data: `Part`.
                **REQUIRED.** Request body of '{media_type}' media-type
                A DNA Part
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/parts/{part_id}', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_add_tags_from_parts_by_part_id(self, part_id: str, data: List[str]):
        """
        Arguments:
            part_id: `str`.
                **REQUIRED.** Part GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/parts/{part_id}/add-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_remove_tags_from_parts_by_part_id(self, part_id: str, data: List[str]):
        """
        Arguments:
            part_id: `str`.
                **REQUIRED.** Part GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/parts/{part_id}/remove-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_reagents_by_reagent_id(self, reagent_id: str) -> Union[DNA, RNA, Chemical, Protein, dict]:
        """
        Arguments:
            reagent_id: `str`.
                **REQUIRED.** Reagent GUID
        
        Returns:
            `Union[DNA, RNA, Chemical, Protein, dict]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/reagents/{reagent_id}', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_reagents_by_reagent_id(self, reagent_id: str, data: Union[DNA, RNA, Chemical, Protein, dict]):
        """
        Arguments:
            reagent_id: `str`.
                **REQUIRED.** Reagent GUID
            
            data: `Union[DNA, RNA, Chemical, Protein, dict]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/reagents/{reagent_id}', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_add_tags_from_reagents_by_reagent_id(self, reagent_id: str, data: List[str]):
        """
        Arguments:
            reagent_id: `str`.
                **REQUIRED.** Reagent GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/reagents/{reagent_id}/add-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_remove_tags_from_reagents_by_reagent_id(self, reagent_id: str, data: List[str]):
        """
        Arguments:
            reagent_id: `str`.
                **REQUIRED.** Reagent GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/reagents/{reagent_id}/remove-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_file_refs_from_reagents_by_reagent_id(self, reagent_id: str) -> List[FileRef]:
        """
        Arguments:
            reagent_id: `str`.
                **REQUIRED.** Reagent GUID
        
        Returns:
            `List[FileRef]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/reagents/{reagent_id}/file-refs', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def get_cells_by_cell_id(self, cell_id: str) -> Union[Prokaryote]:
        """
        Arguments:
            cell_id: `str`.
                **REQUIRED.** Cell GUID
        
        Returns:
            `Union[Prokaryote]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/cells/{cell_id}', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_cells_by_cell_id(self, cell_id: str, data: Union[Prokaryote]):
        """
        Arguments:
            cell_id: `str`.
                **REQUIRED.** Cell GUID
            
            data: `Union[Prokaryote]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/cells/{cell_id}', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_entities_from_cells_by_cell_id(self, cell_id: str) -> List[CellEntity]:
        """
        Arguments:
            cell_id: `str`.
                **REQUIRED.** Cell GUID
        
        Returns:
            `List[CellEntity]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/cells/{cell_id}/entities', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_entities_from_cells_by_cell_id(self, cell_id: str, data: List[CellEntity]):
        """
        Arguments:
            cell_id: `str`.
                **REQUIRED.** Cell GUID
            
            data: `List[CellEntity]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/cells/{cell_id}/entities', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_add_tags_from_cells_by_cell_id(self, cell_id: str, data: List[str]):
        """
        Arguments:
            cell_id: `str`.
                **REQUIRED.** Cell GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/cells/{cell_id}/add-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_remove_tags_from_cells_by_cell_id(self, cell_id: str, data: List[str]):
        """
        Arguments:
            cell_id: `str`.
                **REQUIRED.** Cell GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/cells/{cell_id}/remove-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_samples_by_sample_id(self, sample_id: str) -> Sample:
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
        
        Returns:
            `Sample`. OK
            A sample is a modular unit of an experiment. Each sample contains input conditions, cell
            strain(s), and measurements/observations.
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model(request=f'/samples/{sample_id}', model=Sample, expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_samples_by_sample_id(self, sample_id: str, data: Sample):
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
            
            data: `Sample`.
                **REQUIRED.** Request body of '{media_type}' media-type
                A sample is a modular unit of an experiment. Each sample contains input conditions, cell
                strain(s), and measurements/observations.
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/samples/{sample_id}', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_devices_from_samples_by_sample_id(self, sample_id: str) -> List[SampleDevice]:
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
        
        Returns:
            `List[SampleDevice]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/samples/{sample_id}/devices', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_devices_from_samples_by_sample_id(self, sample_id: str, data: List[SampleDevice]):
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
            
            data: `List[SampleDevice]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/samples/{sample_id}/devices', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_timeseries_from_samples_by_sample_id(self, sample_id: str) -> str:
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
        
        Returns:
            `str`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/samples/{sample_id}/timeseries', expected_content_type='text/plain', expected_codes=[ 200 ])
        return resp
    
    async def get_conditions_from_samples_by_sample_id(self, sample_id: str) -> List[Condition]:
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
        
        Returns:
            `List[Condition]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/samples/{sample_id}/conditions', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_conditions_from_samples_by_sample_id(self, sample_id: str, data: List[Condition]):
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
            
            data: `List[Condition]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/samples/{sample_id}/conditions', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_observations_from_samples_by_sample_id(self, sample_id: str) -> List[Observation]:
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
        
        Returns:
            `List[Observation]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/samples/{sample_id}/observations', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def get_observations_from_samples_by_sample_id_by_signal_id(self, sample_id: str, signal_id: str) -> List[Observation]:
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
            
            signal_id: `str`.
                **REQUIRED.** Signal GUID
        
        Returns:
            `List[Observation]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/samples/{sample_id}/{signal_id}/observations', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def patch_add_tags_from_samples_by_sample_id(self, sample_id: str, data: List[str]):
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/samples/{sample_id}/add-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_remove_tags_from_samples_by_sample_id(self, sample_id: str, data: List[str]):
        """
        Arguments:
            sample_id: `str`.
                **REQUIRED.** Sample GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/samples/{sample_id}/remove-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_experiments_by_experiment_id(self, experiment_id: str) -> Union[dict, dict, Experiment]:
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
        
        Returns:
            `Union[dict, dict, Experiment]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/experiments/{experiment_id}', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_experiments_by_experiment_id(self, experiment_id: str, data: Union[dict, dict, Experiment]):
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
            
            data: `Union[dict, dict, Experiment]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/experiments/{experiment_id}', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_samples_from_experiments_by_experiment_id(self, experiment_id: str) -> List[Sample]:
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
        
        Returns:
            `List[Sample]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/experiments/{experiment_id}/samples', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def get_operations_from_experiments_by_experiment_id(self, experiment_id: str) -> List[ExperimentOperation]:
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
        
        Returns:
            `List[ExperimentOperation]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/experiments/{experiment_id}/operations', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_operations_from_experiments_by_experiment_id(self, experiment_id: str, data: List[ExperimentOperation]):
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
            
            data: `List[ExperimentOperation]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/experiments/{experiment_id}/operations', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_signals_from_experiments_by_experiment_id \
    (
        self,
        experiment_id: str,
    ) -> List[Union[PlateReaderFluorescence, PlateReaderAbsorbance, dict, dict, dict, GenericSignal]]:
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
        
        Returns:
            `List[Union[PlateReaderFluorescence, PlateReaderAbsorbance, dict, dict, dict, GenericSignal]]`.
            OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/experiments/{experiment_id}/signals', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_signals_from_experiments_by_experiment_id \
    (
        self,
        experiment_id: str,
        data: List[Union[PlateReaderFluorescence, PlateReaderAbsorbance, dict, dict, dict, GenericSignal]],
    ):
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
            
            data: `List[Union[PlateReaderFluorescence, PlateReaderAbsorbance, dict, dict, dict, GenericSignal]]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/experiments/{experiment_id}/signals', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_add_tags_from_experiments_by_experiment_id(self, experiment_id: str, data: List[str]):
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/experiments/{experiment_id}/add-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_remove_tags_from_experiments_by_experiment_id(self, experiment_id: str, data: List[str]):
        """
        Arguments:
            experiment_id: `str`.
                **REQUIRED.** Experiment GUID
            
            data: `List[str]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/experiments/{experiment_id}/remove-tags', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_observations_by_observation_id(self, observation_id: str) -> List[Observation]:
        """
        Arguments:
            observation_id: `str`.
                **REQUIRED.** Observation GUID
        
        Returns:
            `List[Observation]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/observations/{observation_id}', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def post_observations_by_observation_id(self, observation_id: str, data: List[Observation]):
        """
        Arguments:
            observation_id: `str`.
                **REQUIRED.** Observation GUID
            
            data: `List[Observation]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/observations/{observation_id}', method='POST', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_signals_by_signal_id(self, signal_id: str) -> Union[PlateReaderFluorescence, PlateReaderAbsorbance, dict, dict, dict, GenericSignal]:
        """
        Get Signal from GUID
        
        Arguments:
            signal_id: `str`.
                **REQUIRED.** Signal GUID
        
        Returns:
            `Union[PlateReaderFluorescence, PlateReaderAbsorbance, dict, dict, dict, GenericSignal]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/signals/{signal_id}', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def get_tags_by_guid(self, guid: str) -> List[str]:
        """
        This function lists the tags associated with an entity. Currently, tags can be associated with
        Parts, Reagents, Cells, Samples, and Experiments.
        
        Arguments:
            guid: `str`.
                **REQUIRED.** The GUID of any entity
        
        Returns:
            `List[str]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/tags/{guid}', expected_content_type='application/json', expected_codes=[ 200 ])
        return resp
    
    async def patch_link_from_file_refs_by_guid(self, guid: str, data: List[FileRef]):
        """
        Arguments:
            guid: `str`.
                **REQUIRED.** The GUID of any entity
            
            data: `List[FileRef]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/file-refs/{guid}/link', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def patch_unlink_from_file_refs_by_guid(self, guid: str, data: List[FileRef]):
        """
        Arguments:
            guid: `str`.
                **REQUIRED.** The GUID of any entity
            
            data: `List[FileRef]`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/file-refs/{guid}/unlink', method='PATCH', encode_body='application/json', body=data, expected_codes=[ 200 ])
    
    async def get_files_by_file_id(self, file_id: str) -> bytes:
        """
        Arguments:
            file_id: `str`.
                **REQUIRED.** File GUID
        
        Returns:
            `bytes`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_binary_data(request=f'/files/{file_id}', expected_content_type='plain/text', expected_codes=[ 200 ])
        return resp
    
    async def post_files_by_file_id(self, file_id: str, data: bytes):
        """
        Arguments:
            file_id: `str`.
                **REQUIRED.** File GUID
            
            data: `bytes`.
                **REQUIRED.** Request body of '{media_type}' media-type
        
        Generated by Python OpenAPI Parser
        """
        
        await self.fetch(request=f'/files/{file_id}', method='POST', encode_body='plain/text', body=data, expected_codes=[ 200 ])
    
    # endregion
    

__all__ = \
[
    'BiologicalKnowledgeGraphBckGApiClient',
    'BiologicalKnowledgeGraphBckGApiClientServers',
]
