# -------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
# -------------------------------------------------------------------------------------------
from .utils import datetime_decoder
from .utils import discriminator_decoder
from dataclasses import dataclass
from dataclasses import field
from dataclasses_json.api import DataClassJsonMixin
from dataclasses_json.api import LetterCase
from dataclasses_json.api import dataclass_json
from dataclasses_json.cfg import config
from datetime import date
from datetime import datetime
from datetime import time
from enum import Enum
from typing import *

class FileRefType(Enum):
    AnthaBundleSource = 'AnthaBundleSource'
    AnthaBundleFinal = 'AnthaBundleFinal'
    AnthaPlateLayout = 'AnthaPlateLayout'
    AnthaInputPlate = 'AnthaInputPlate'
    CharacterizationData = 'CharacterizationData'
    SequencingData = 'SequencingData'
    CrnModel = 'CrnModel'
    MiscFile = 'MiscFile'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class FileRef(DataClassJsonMixin):
    """
    Description of the File Metadata stored in the Azure tables.

    Required Properties:
     - id
     - file_name
     - type

    Generated by Python OpenAPI Parser
    """

    id: str
    file_name: str
    type: FileRefType

class ConcentrationUnit(Enum):
    NM = 'NM'
    UM = 'UM'
    MM = 'MM'
    M = 'M'
    X = 'X'
    NGUL = 'NGUL'
    NGML = 'NGML'
    UML = 'UML'
    ULML = 'ULML'
    UGML = 'UGML'
    PERC = 'PERC'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Concentration(DataClassJsonMixin):
    """ Concentration containing value and units. """

    value: Optional[float] = None
    unit: Optional[ConcentrationUnit] = None

class TimeUnits(Enum):
    Hours = 'Hours'
    Min = 'Min'
    Sec = 'Sec'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Time(DataClassJsonMixin):
    """
    Schema describing time in hours, minutes, or seconds.

    Required Properties:
     - value
     - units

    Generated by Python OpenAPI Parser
    """

    value: float
    units: TimeUnits

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Position(DataClassJsonMixin):
    """
    Schema describing the row and column integer index of a Well's position

    Required Properties:
     - row
     - col

    Generated by Python OpenAPI Parser
    """

    row: int = 0
    col: int = 0

class PartType(Enum):
    """ Part Type """

    Promoter = 'Promoter'
    RBS = 'RBS'
    CDS = 'CDS'
    Terminator = 'Terminator'
    UserDefined = 'UserDefined'
    Scar = 'Scar'
    Backbone = 'Backbone'
    Ori = 'Ori'
    Linker = 'Linker'
    RestrictionSite = 'RestrictionSite'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Part(DataClassJsonMixin):
    """
    A DNA Part

    Required Properties:
     - id
     - name
     - type
     - sequence

    Generated by Python OpenAPI Parser
    """

    id: str
    name: str
    type: PartType
    """ Part Type """

    sequence: str
    """ DNA sequence """

    deprecated: Optional[bool] = False

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PartInstance(DataClassJsonMixin):
    """
    An annotation of a Part in a sequence.

    Required Properties:
     - id
     - position
     - orientation

    Generated by Python OpenAPI Parser
    """

    id: str
    position: int
    """ Position of the part in the sequence """

    orientation: bool
    """ true = 5'->3', false = reversed """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Reagent(DataClassJsonMixin):
    """
    A biochemical reagent (DNA/RNA/Protein/Chemical/Generic Entity)

    Required Properties:
     - id
     - name
     - notes

    Generated by Python OpenAPI Parser
    """

    id: str
    name: str
    notes: str
    barcode: Optional[str] = None
    deprecated: Optional[bool] = False

class DNAType(Enum):
    """ DNA Type """

    SourceLinearDNA = 'SourceLinearDNA'
    SourcePlasmidDNA = 'SourcePlasmidDNA'
    AssembledPlasmidDNA = 'AssembledPlasmidDNA'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DNA(DataClassJsonMixin):
    """
    A DNA Reagent

    Required Properties:
     - type
     - sequence

    Generated by Python OpenAPI Parser
    """

    sequence: str
    type: DNAType
    """ DNA Type """

    concentration: Optional[Concentration] = None
    """ Concentration containing value and units. """


class RNAType(Enum):
    """ RNA Type """

    MessengerRNA = 'MessengerRNA'
    TransferRNA = 'TransferRNA'
    GuideRNA = 'GuideRNA'
    SmallRNA = 'SmallRNA'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class RNA(DataClassJsonMixin):
    """
    An RNA Reagent

    Required Properties:
     - type
     - sequence

    Generated by Python OpenAPI Parser
    """

    sequence: str
    type: RNAType
    """ RNA Type """


class ChemicalType(Enum):
    """ RNA Type """

    Media = 'Media'
    Antibiotic = 'Antibiotic'
    SmallMolecule = 'SmallMolecule'
    Other = 'Other'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Chemical(DataClassJsonMixin):
    """
    A Chemical Reagent

    Required Properties:
     - type

    Generated by Python OpenAPI Parser
    """

    type: ChemicalType
    """ RNA Type """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Protein(DataClassJsonMixin):
    """
    A Protein Reagent

    Required Properties:
     - is_reporter

    Generated by Python OpenAPI Parser
    """

    is_reporter: bool

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Cell(DataClassJsonMixin):
    """
    A biological cell strain

    Required Properties:
     - id
     - name
     - notes

    Generated by Python OpenAPI Parser
    """

    id: str
    name: str
    notes: str
    barcode: Optional[str] = None
    genotype: Optional[str] = ''
    deprecated: Optional[bool] = False

class CellEntityCompartment(Enum):
    Chromosome = 'Chromosome'
    Plasmid = 'Plasmid'
    Cytosol = 'Cytosol'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CellEntity(DataClassJsonMixin):
    """
    A biochemical entity in a Cellular compartment

    Required Properties:
     - cell_id
     - compartment
     - entity_id

    Generated by Python OpenAPI Parser
    """

    cell_id: str
    compartment: CellEntityCompartment
    entity_id: str

class ProkaryoteType(Enum):
    """ Prokaryotic type """

    Bacteria = 'Bacteria'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Prokaryote(DataClassJsonMixin):
    """
    A Prokaryotic cell strain

    Required Properties:
     - type

    Generated by Python OpenAPI Parser
    """

    type: ProkaryoteType
    """ Prokaryotic type """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Interaction(DataClassJsonMixin):
    """
    Core properties of an Interaction

    Required Properties:
     - id

    Generated by Python OpenAPI Parser
    """

    id: str
    notes: Optional[str] = None
    deprecated: Optional[bool] = False

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CodesFor(DataClassJsonMixin):
    """
    Required Properties:
     - cds_id
     - protein_id

    Generated by Python OpenAPI Parser
    """

    cds_id: str
    """ The ID of the template CDS """

    protein_id: str
    """ The ID of the protein produced """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GeneticActivation(DataClassJsonMixin):
    """
    Required Properties:
     - activator
     - activated

    Generated by Python OpenAPI Parser
    """

    activated: str
    """ The ID of the Promoter that is activated by the Transcription factors """

    activator: List[str]
    """ The IDs of the transcription factor reagents """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GeneticInhibition(DataClassJsonMixin):
    """
    Required Properties:
     - inhibitor
     - inhibited

    Generated by Python OpenAPI Parser
    """

    inhibited: str
    """ The ID of the Promoter that is inhibited by the Transcription factors """

    inhibitor: List[str]
    """ The IDs of the transcription factor reagents """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GenericInteraction(DataClassJsonMixin):
    """
    Required Properties:
     - regulator
     - regulated

    Generated by Python OpenAPI Parser
    """

    regulated: str
    """ The ID of the regulated reagents """

    regulator: List[str]
    """ The IDs of the regulator reagents """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Reaction(DataClassJsonMixin):
    """
    Required Properties:
     - reactants
     - enzyme
     - products

    Generated by Python OpenAPI Parser
    """

    reactants: List[List[str]]
    """ A list of complexes, where each complex is a list of reagent Ids. """

    products: List[List[str]]
    """ A list of complexes, where each complex is a list of reagent Ids. """

    enzyme: List[str]
    """ A complex, where each complex is a list of reagent Ids. """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CellLineage(DataClassJsonMixin):
    """
    Lineage between mother and daughter cells

    Required Properties:
     - mother
     - daughter

    Generated by Python OpenAPI Parser
    """

    mother: str
    """ Cell ID of the mother cell strain """

    daughter: str
    """ Cell ID of the daughter cell strain """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DNAComponent(DataClassJsonMixin):
    """
    A description of the components that were used to build a DNA construct

    Required Properties:
     - source
     - target

    Generated by Python OpenAPI Parser
    """

    source: str
    """ DNA reagent ID of the component used during assembly """

    target: str
    """ DNA reagent ID of assembled construct """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class DNAAssembly(DataClassJsonMixin):
    """
    The experiment that produced the DNA circuit

    Required Properties:
     - experiment
     - target

    Generated by Python OpenAPI Parser
    """

    experiment: str
    """ ID of the experiment that produced the DNA circuit """

    target: str
    """ ID of the DNA reagent that was produced in the experiment """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class CellTransformation(DataClassJsonMixin):
    """
    The experiment that transformed the cell strain

    Required Properties:
     - experiment
     - target

    Generated by Python OpenAPI Parser
    """

    experiment: str
    """ ID of the experiment that transformed the cell strain """

    target: str
    """ ID of the Cell strain """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Condition(DataClassJsonMixin):
    """
    A reagent treatment or input that is added at some specific concentration (and at some time) to
    a Sample.

    Required Properties:
     - sample_id
     - reagent_id
     - concentration

    Generated by Python OpenAPI Parser
    """

    sample_id: str
    reagent_id: str
    concentration: Concentration
    """ Concentration containing value and units. """

    time: Optional[Time] = None
    """ Schema describing time in hours, minutes, or seconds. """


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PlateReaderMetaData(DataClassJsonMixin):
    """
    Meta Data associated with platereaders. This schema specifically contains virtual and physical
    positional information of wells.

    Required Properties:
     - virtual_well

    Generated by Python OpenAPI Parser
    """

    virtual_well: Position
    """ Schema describing the row and column integer index of a Well's position """

    physical_well: Optional[Position] = None
    """ Schema describing the row and column integer index of a Well's position """

    physical_plate_name: Optional[str] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SampleDevice(DataClassJsonMixin):
    """
    Required Properties:
     - cell_id

    Generated by Python OpenAPI Parser
    """

    cell_id: str
    cell_density: Optional[float] = None
    preseeding_density: Optional[float] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Sample(DataClassJsonMixin):
    """
    A sample is a modular unit of an experiment. Each sample contains input conditions, cell
    strain(s), and measurements/observations.

    Required Properties:
     - id
     - experiment_id

    Generated by Python OpenAPI Parser
    """

    id: str
    experiment_id: str
    meta: Optional[PlateReaderMetaData] = None
    """
    Meta Data associated with platereaders. This schema specifically contains virtual and physical
    positional information of wells.
    """

    deprecated: Optional[bool] = False

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PlateReaderFilter(DataClassJsonMixin):
    """
    Schema describing a plate reader filter

    Required Properties:
     - midpoint

    Generated by Python OpenAPI Parser
    """

    midpoint: float
    width: Optional[float] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Signal(DataClassJsonMixin):
    """
    Schema describing metadata associated with fluorescence observed from a plate reader

    Required Properties:
     - id
     - signal_type

    Generated by Python OpenAPI Parser
    """

    id: str
    signal_type: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PlateReaderFluorescence(DataClassJsonMixin):
    """
    Schema describing metadata associated with fluorescence observed from a plate reader

    Required Properties:
     - emission_filter
     - excitation_filter

    Generated by Python OpenAPI Parser
    """

    emission_filter: PlateReaderFilter
    """ Schema describing a plate reader filter """

    excitation_filter: PlateReaderFilter
    """ Schema describing a plate reader filter """

    id: Optional[str] = None
    gain: Optional[float] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PlateReaderAbsorbance(DataClassJsonMixin):
    """
    Schema describing metadata associated with absorbance observed from a plate reader

    Required Properties:
     - wavelength
     - correction

    Generated by Python OpenAPI Parser
    """

    wavelength: float
    correction: float
    gain: Optional[float] = None

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class GenericSignal(DataClassJsonMixin):
    """
    Generic Signal

    Required Properties:
     - name

    Generated by Python OpenAPI Parser
    """

    name: str

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Observation(DataClassJsonMixin):
    """
    Required Properties:
     - id
     - sample_id
     - signal_id
     - value

    Generated by Python OpenAPI Parser
    """

    id: str
    sample_id: str
    signal_id: str
    value: float
    timestamp: Optional[datetime] = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)), default=None)

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class Experiment(DataClassJsonMixin):
    """
    An experiment

    Required Properties:
     - id
     - name
     - experiment_type

    Generated by Python OpenAPI Parser
    """

    id: str
    name: str
    experiment_type: str

class ExperimentScale(Enum):
    ShakeFlask = 'ShakeFlask'
    DeepPlate24 = 'DeepPlate24'
    LowPlate24 = 'LowPlate24'
    Plate96 = 'Plate96'
    Bioreactor = 'Bioreactor'

class ExperimentOperationType(Enum):
    AnthaExecuted = 'AnthaExecuted'
    AnthaBundleUploaded = 'AnthaBundleUploaded'
    AnthaLayoutUploaded = 'AnthaLayoutUploaded'
    ExperimentFinished = 'ExperimentFinished'
    ExperimentStarted = 'ExperimentStarted'
    BacterialStocksInnoculated = 'BacterialStocksInnoculated'
    OvernightStocksDiluted = 'OvernightStocksDiluted'
    PlateReaderStarted = 'PlateReaderStarted'
    ResultsProcessed = 'ResultsProcessed'
    InputPlatePrepared = 'InputPlatePrepared'
    PlateIncubated = 'PlateIncubated'
    ColoniesPicked = 'ColoniesPicked'
    Transfection = 'Transfection'
    Induction = 'Induction'

@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class ExperimentOperation(DataClassJsonMixin):
    """
    Various operations, events, and stages of an experiment

    Required Properties:
     - id
     - timestamp
     - type

    Generated by Python OpenAPI Parser
    """

    id: str
    timestamp: datetime = field(metadata=config(encoder=datetime.isoformat, decoder=datetime_decoder(datetime)))
    type: ExperimentOperationType


__all__ = \
[
    'Cell',
    'CellEntity',
    'CellEntityCompartment',
    'CellLineage',
    'CellTransformation',
    'Chemical',
    'ChemicalType',
    'CodesFor',
    'Concentration',
    'ConcentrationUnit',
    'Condition',
    'DNA',
    'DNAAssembly',
    'DNAComponent',
    'DNAType',
    'Experiment',
    'ExperimentOperation',
    'ExperimentOperationType',
    'FileRef',
    'FileRefType',
    'GenericInteraction',
    'GenericSignal',
    'GeneticActivation',
    'GeneticInhibition',
    'Interaction',
    'Observation',
    'Part',
    'PartInstance',
    'PartType',
    'PlateReaderAbsorbance',
    'PlateReaderFilter',
    'PlateReaderFluorescence',
    'PlateReaderMetaData',
    'Position',
    'Prokaryote',
    'ProkaryoteType',
    'Protein',
    'RNA',
    'RNAType',
    'Reaction',
    'Reagent',
    'Sample',
    'SampleDevice',
    'Signal',
    'Time',
    'TimeUnits',
    'ExperimentScale',
]
